


##  Cumulative frequency graph for FIA

#http://www.r-tutor.com/elementary-statistics/quantitative-data/cumulative-frequency-graph

cf<-read.csv("data_folder/trees_with_calculated_errors.csv")
duration = faithful$eruptions 
 breaks = seq(1.5, 5.5, by=0.5) 
 duration.cut = cut(duration, breaks, right=FALSE) 
 duration.freq = table(duration.cut)

 cumfreq0 = c(0, cumsum(duration.freq)) 
 plot(breaks, cumfreq0,            # plot the data 
          main="Old Faithful Eruptions",  # main title 
          xlab="Duration minutes",        # x−axis label 
          ylab="Cumulative eruptions")   # y−axis label 
 lines(breaks, cumfreq0)           # join the points
###############################################################


 library(ggpubr)
 library(ggplot2)
########################################################################################## 
table(trees$F_STATUSCD)
 
trees<-read.csv("data_folder/trees_with_calculated_errors.csv")
 
 trees$errdiam<-round(trees$errdiam, digits = 3)
 trees$errht<-round(trees$errht, digits = 3)
 
 ### CFD of 4 populations of trees
 dead<-subset(trees,Q_STATUSCD=="2")
 live<-subset(trees,Q_STATUSCD=="1")

 # trees or saplings
 all.t<-subset(trees,Q_DIA>12.6)
 all.s<-subset(trees,Q_DIA<12.6)
 
 # create the 4 populations of trees
 lt<-subset(live, Q_DIA>12.6 ) # there are no measurements between 12.4 and 12.7
 ls<-subset(live, Q_DIA<12.6 ) 
 dt<-subset(dead, Q_DIA>12.6 )
 ds<-subset(dead, Q_DIA<12.6 )
 
 ###################################
 
 # m is for measured
 m.lt<-subset(lt, F_DIACHECK=="0" & Q_DIACHECK=="0") # measured
 m.ls<-subset(ls, F_DIACHECK=="0" & Q_DIACHECK=="0") # measured
 m.ds<-subset(ds, F_DIACHECK=="0" & Q_DIACHECK=="0") # measured
 m.dt<-subset(dt, F_DIACHECK=="0" & Q_DIACHECK=="0") # measured

 # e is for estimated 
 e.lt.fc<-subset(lt, F_DIACHECK=="1" & Q_DIACHECK=="0") # FC est
 e.lt.qa<-subset(lt, F_DIACHECK=="0" & Q_DIACHECK=="1") # QA est
 e.lt.fcqa<-subset(lt,  F_DIACHECK=="1" & Q_DIACHECK=="1") # both est
 e.lt<-rbind(e.lt.fc,e.lt.qa,e.lt.fcqa)
#
 e.ds.fc<-subset(ds, F_DIACHECK=="1" & Q_DIACHECK=="0") # FC est
 e.ds.qa<-subset(ds, F_DIACHECK=="0" & Q_DIACHECK=="1") # QA est
 e.ds.fcqa<-subset(ds,  F_DIACHECK=="1" & Q_DIACHECK=="1") # both est
 e.ds<-rbind(e.ds.fc,e.ds.qa,e.ds.fcqa)
#
 e.dt.fc<-subset(dt, F_DIACHECK=="1" & Q_DIACHECK=="0") # FC est
 e.dt.qa<-subset(dt, F_DIACHECK=="0" & Q_DIACHECK=="1") # QA est
 e.dt.fcqa<-subset(dt,  F_DIACHECK=="1" & Q_DIACHECK=="1") # both est
 e.dt<-rbind(e.dt.fc,e.dt.qa,e.dt.fcqa)
#
 e.ls.fc<-subset(ls, F_DIACHECK=="1" & Q_DIACHECK=="0") # FC est
 e.ls.qa<-subset(ls, F_DIACHECK=="0" & Q_DIACHECK=="1") # QA est
 e.ls.fcqa<-subset(ls,  F_DIACHECK=="1" & Q_DIACHECK=="1") # both est
 e.ls<-rbind(e.ls.fc,e.ls.qa,e.ls.fcqa)
 
# u is for unbroken
 u.lt<-subset(lt, F_broken=="0" & Q_broken=="0") # measured
 u.ls<-subset(ls, F_broken=="0" & Q_broken=="0") # measured
 u.ds<-subset(ds, F_broken=="0" & Q_broken=="0") # measured
 u.dt<-subset(dt, F_broken=="0" & Q_broken=="0") # measured

 # b is for broken
 b.lt<-subset(lt, F_broken!="0" | Q_broken!="0") # measured
 b.ls<-subset(ls, F_broken!="0" | Q_broken!="0") # measured
 b.ds<-subset(ds, F_broken!="0" | Q_broken!="0") # measured
 b.dt<-subset(dt, F_broken!="0" | Q_broken!="0") # measured
 
 
 
 
 ###################
#####   BELOW I DO THIS THE LONG HAND WAY!
 ## set parameters for cumalative freq table
 breaks = seq(-10, 10, by=0.254) 


 ################
 m.lt.cut = cut(m.lt$errdiam, breaks, right=TRUE) 
 m.lt.cum = as.data.frame(c(0, cumsum(table(m.lt.cut))))
 m.lt.cum$rownames<-rownames(m.lt.cum) 
 m.lt.cum<-m.lt.cum[-1,]
 m.lt.cum$Type<-"Live trees (n=22,894)"
 m.lt.cum$Value<-m.lt.cum$`c(0, cumsum(table(m.lt.cut)))`
 #
 m.dt.cut = cut(m.dt$errdiam, breaks, right=TRUE) 
 m.dt.cum = as.data.frame(c(0, cumsum(table(m.dt.cut))))
 m.dt.cum$rownames<-rownames(m.dt.cum) 
 m.dt.cum<-m.dt.cum[-1,]
 m.dt.cum$Type<-"Dead trees (n=2,519)"
 m.dt.cum$Value<-m.dt.cum$`c(0, cumsum(table(m.dt.cut)))`
 #
 m.ls.cut = cut(m.ls$errdiam, breaks, right=TRUE) 
 m.ls.cum = as.data.frame(c(0, cumsum(table(m.ls.cut))))
 m.ls.cum$rownames<-rownames(m.ls.cum) 
 m.ls.cum<-m.ls.cum[-1,]
 m.ls.cum$Type<-"Live saplings (n=6,148)"
 m.ls.cum$Value<-m.ls.cum$`c(0, cumsum(table(m.ls.cut)))`
#
 m.ds.cut = cut(m.ds$errdiam, breaks, right=TRUE) 
 m.ds.cum = as.data.frame(c(0, cumsum(table(m.ds.cut))))
 m.ds.cum$rownames<-rownames(m.ds.cum) 
 m.ds.cum<-m.ds.cum[-1,]
 m.ds.cum$Type<-"Dead saplings (n=117)"
 m.ds.cum$Value<-m.ds.cum$`c(0, cumsum(table(m.ds.cut)))`
 #
#####

 # calculate the proportional frequency
 m.lt.cum$prop<-m.lt.cum$Value/max(m.lt.cum$Value)
 m.ls.cum$prop<-m.ls.cum$Value/max(m.ls.cum$Value)
 m.dt.cum$prop<-m.dt.cum$Value/max(m.dt.cum$Value)
 m.ds.cum$prop<-m.ds.cum$Value/max(m.ds.cum$Value)
 
 # combine the four populations
m.four_pop<-rbind(m.lt.cum[,2:5], m.dt.cum[,2:5], m.ls.cum[,2:5], m.ds.cum[,2:5])
## bring in breaks as a numeric
m.four_pop$breaks<-breaks[-1]
  
dim(m.four_pop)



#############################


########## ESTIMATED!

## set parameters for cumalative freq table
breaks = seq(-10, 10, by=0.254) 

#### 
################
e.lt.cut = cut(e.lt$errdiam, breaks, right=TRUE) 
e.lt.cum = as.data.frame(c(0, cumsum(table(e.lt.cut))))
e.lt.cum$rownames<-rownames(e.lt.cum) 
e.lt.cum<-e.lt.cum[-1,]
e.lt.cum$Type<-"Live trees (n=121)"
e.lt.cum$Value<-e.lt.cum$`c(0, cumsum(table(e.lt.cut)))`
#
e.dt.cut = cut(e.dt$errdiam, breaks, right=TRUE) 
e.dt.cum = as.data.frame(c(0, cumsum(table(e.dt.cut))))
e.dt.cum$rownames<-rownames(e.dt.cum) 
e.dt.cum<-e.dt.cum[-1,]
e.dt.cum$Type<-"Dead trees (n=24)"
e.dt.cum$Value<-e.dt.cum$`c(0, cumsum(table(e.dt.cut)))`
#
e.ls.cut = cut(e.ls$errdiam, breaks, right=TRUE) 
e.ls.cum = as.data.frame(c(0, cumsum(table(e.ls.cut))))
e.ls.cum$rownames<-rownames(e.ls.cum) 
e.ls.cum<-e.ls.cum[-1,]
e.ls.cum$Type<-"Live saplings (n=10)"
e.ls.cum$Value<-e.ls.cum$`c(0, cumsum(table(e.ls.cut)))`
#
e.ds.cut = cut(e.ds$errdiam, breaks, right=TRUE) 
e.ds.cum = as.data.frame(c(0, cumsum(table(e.ds.cut))))
e.ds.cum$rownames<-rownames(e.ds.cum) 
e.ds.cum<-e.ds.cum[-1,]
e.ds.cum$Type<-"Dead saplings"
e.ds.cum$Value<-e.ds.cum$`c(0, cumsum(table(e.ds.cut)))`
#
#####

# calculate the proportional frequency
e.lt.cum$prop<-e.lt.cum$Value/max(e.lt.cum$Value)
e.ls.cum$prop<-e.ls.cum$Value/max(e.ls.cum$Value)
e.dt.cum$prop<-e.dt.cum$Value/max(e.dt.cum$Value)
e.ds.cum$prop<-e.ds.cum$Value/max(e.ds.cum$Value)

# combine the four populations
e.four_pop<-rbind(e.lt.cum[,2:5], e.dt.cum[,2:5], e.ls.cum[,2:5], e.ds.cum[,2:5])
## bring in breaks as a numeric
e.four_pop$breaks<-breaks[-1]

dim(e.four_pop)


##############################################


## Decay Class!


# Make 5 decay classes
d1<-trees[trees$Q_DECAYCD=="1",]
d2<-trees[trees$Q_DECAYCD=="2",]
d3<-trees[trees$Q_DECAYCD=="3",]
d4<-trees[trees$Q_DECAYCD=="4",]
d5<-trees[trees$Q_DECAYCD=="5",]
###########


##################### Decay class diameter
table(trees$Q_DECAYCD)
d1.cut = cut(d1$errdiam, breaks, right=TRUE) 
d1.cum = as.data.frame(c(0, cumsum(table(d1.cut))))
d1.cum$rownames<-rownames(d1.cum) 
d1.cum<-d1.cum[-1,]
d1.cum$Type<-"Decay class 1 (n=647)"

d1.cum$Value<-d1.cum$`c(0, cumsum(table(d1.cut)))`
d1.cum$prop<-d1.cum$Value/max(d1.cum$Value)
#
d2.cut = cut(d2$errdiam, breaks, right=TRUE) 
d2.cum = as.data.frame(c(0, cumsum(table(d2.cut))))
d2.cum$rownames<-rownames(d2.cum) 
d2.cum<-d2.cum[-1,]
d2.cum$Type<-"Decay class 2 (n=750)"
d2.cum$Value<-d2.cum$`c(0, cumsum(table(d2.cut)))`
d2.cum$prop<-d2.cum$Value/max(d2.cum$Value)
#
d3.cut = cut(d3$errdiam, breaks, right=TRUE) 
d3.cum = as.data.frame(c(0, cumsum(table(d3.cut))))
d3.cum$rownames<-rownames(d3.cum) 
d3.cum<-d3.cum[-1,]
d3.cum$Type<-"Decay class 3 (n=1,083)"
d3.cum$Value<-d3.cum$`c(0, cumsum(table(d3.cut)))`
d3.cum$prop<-d3.cum$Value/max(d3.cum$Value)
#
d4.cut = cut(d4$errdiam, breaks, right=TRUE) 
d4.cum = as.data.frame(c(0, cumsum(table(d4.cut))))
d4.cum$rownames<-rownames(d4.cum) 
d4.cum<-d4.cum[-1,]
d4.cum$Type<-"Decay class 4 (n=773)"
d4.cum$Value<-d4.cum$`c(0, cumsum(table(d4.cut)))`
d4.cum$prop<-d4.cum$Value/max(d4.cum$Value)
#
d5.cut = cut(d5$errdiam, breaks, right=TRUE) 
d5.cum = as.data.frame(c(0, cumsum(table(d5.cut))))
d5.cum$rownames<-rownames(d5.cum) 
d5.cum<-d5.cum[-1,]
d5.cum$Type<-"Decay class 5 (n=198)"
d5.cum$Value<-d5.cum$`c(0, cumsum(table(d5.cut)))`
d5.cum$prop<-d5.cum$Value/max(d5.cum$Value)


decay<-rbind(d1.cum[,2:5], d2.cum[,2:5], d3.cum[,2:5], d4.cum[,2:5],d5.cum[,2:5])
## bring in breaks as a numeric
decay$breaks<-breaks[-1]

###########################################################################################
## Diameter cum freq


m.four_pop$prop<-m.four_pop$prop*100
e.four_pop$prop<-e.four_pop$prop*100
decay$prop<-decay$prop*100
#
e.four_pop<-e.four_pop[e.four_pop$Type!="Dead saplings",]

m.four_pop$Type<-factor(m.four_pop$Type, levels=c("Live trees (n=22,894)","Live saplings (n=6,148)","Dead trees (n=2,519)","Dead saplings (n=117)"))
e.four_pop$Type<-factor(e.four_pop$Type, levels=c("Live trees (n=121)","Live saplings (n=10)","Dead trees (n=24)","Dead saplings"))

library(ggplot2)

g.dia<-ggplot(m.four_pop, aes(x=breaks, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("")+ylab("")+ theme(text=element_text(size=18))+theme_bw()+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_color_manual(values=c("black","blue","red","purple"))+
  scale_linetype_manual(values=c("solid","dotdash","longdash", "dotted"))+
  scale_y_continuous(expand = c(0, 0))+
  scale_x_continuous(breaks = seq(-2, 2, 0.1), lim = c(-2, 2))+
  ggtitle("A. Measured diameters")+
  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+ theme(plot.title = element_text(hjus=.02,vjus=-8))+
  theme(text=element_text(size=24), legend.key.width = unit(4,"cm"))+xlab("")
g.dia

e.four_pop
e.dia<-ggplot(e.four_pop, aes(x=breaks, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("")+ylab("Cumulative frequency (%)")+ theme(text=element_text(size=18))+
  scale_linetype_manual(values=c("solid","dotdash","longdash", "dotted"))+theme_bw()+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))+xlim(-2.2,2.2)+ggtitle("B. Estimated diameters")+
  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  scale_color_manual(values=c("black","blue","red","purple"))+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+ theme(plot.title = element_text(hjus=.02,vjus=-8))+
  theme(text=element_text(size=24), legend.key.width = unit(4,"cm"))+xlab("")
e.dia

decay.dia<-ggplot(decay, aes(x=breaks, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("Diameter error (FC-QA) (cm)")+ylab("")+theme_bw()+ theme(text=element_text(size=18))+
  scale_linetype_manual(values=c("solid","longdash","twodash","dotdash","dotted"))+
  scale_color_manual(values=c("brown","grey","orange","blue","red"))+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_y_continuous(expand = c(0, 0))+
  scale_x_continuous(breaks = seq(-2, 2, 0.5), lim = c(-2, 2))+
  ggtitle("C. Decay class")+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+ theme(plot.title = element_text(hjus=.02,vjus=-8))+
  theme(text=element_text(size=24), legend.key.width = unit(4,"cm"))
decay.dia


#devtools::install_github("thomasp85/patchwork")
library(patchwork)

dpi=300    #pixels per square inch
tiff("cumulative freq diameter.tif", width=14*dpi, height=14*dpi, res=dpi)
g.dia + e.dia+ decay.dia +plot_layout(ncol = 1)
dev.off()


###############################################################################################################

#  Now do height

#######################################################################
## set parameters for cumalative freq table

breaks.ht = seq(-10, 10, by=0.305) 



# mh is actually Unbroken

#### 
mh.lt.cut = cut(u.lt$errht, breaks.ht, right=FALSE) 
mh.lt.cum = as.data.frame(c(0, cumsum(table(mh.lt.cut))))
mh.lt.cum$rownames<-rownames(mh.lt.cum) 
mh.lt.cum<-mh.lt.cum[-1,]
mh.lt.cum$Type<-"Live trees (n=21,477)"
mh.lt.cum$Value<-mh.lt.cum$`c(0, cumsum(table(mh.lt.cut)))`
mh.lt.cum$prop<-mh.lt.cum$Value/max(mh.lt.cum$Value)
#
mh.dt.cut = cut(u.dt$errht, breaks.ht, right=FALSE) 
mh.dt.cum = as.data.frame(c(0, cumsum(table(mh.dt.cut))))
mh.dt.cum$rownames<-rownames(mh.dt.cum) 
mh.dt.cum<-mh.dt.cum[-1,]
mh.dt.cum$Type<-"Dead trees (n=82)"
mh.dt.cum$Value<-mh.dt.cum$`c(0, cumsum(table(mh.dt.cut)))`
mh.dt.cum$prop<-mh.dt.cum$Value/max(mh.dt.cum$Value)

#
mh.ls.cut = cut(u.ls$errht, breaks.ht, right=FALSE) 
mh.ls.cum = as.data.frame(c(0, cumsum(table(mh.ls.cut))))
mh.ls.cum$rownames<-rownames(mh.ls.cum) 
mh.ls.cum<-mh.ls.cum[-1,]
mh.ls.cum$Type<-"Live saplings (n=1,042)"
mh.ls.cum$Value<-mh.ls.cum$`c(0, cumsum(table(mh.ls.cut)))`
mh.ls.cum$prop<-mh.ls.cum$Value/max(mh.ls.cum$Value)

#
mh.ds.cut = cut(u.ds$errht, breaks.ht, right=FALSE) 
mh.ds.cum = as.data.frame(c(0, cumsum(table(mh.ds.cut))))
mh.ds.cum$rownames<-rownames(mh.ds.cum) 
mh.ds.cum<-mh.ds.cum[-1,]
mh.ds.cum$Type<-"Dead saplings (n=50)"
mh.ds.cum$Value<-mh.ds.cum$`c(0, cumsum(table(mh.ds.cut)))`
mh.ds.cum$prop<-mh.ds.cum$Value/max(mh.ds.cum$Value)

# calculate the proportional frequency
mh.lt.cum$prop<-mh.lt.cum$Value/max(mh.lt.cum$Value)
mh.ls.cum$prop<-mh.ls.cum$Value/max(mh.ls.cum$Value)
mh.dt.cum$prop<-mh.dt.cum$Value/max(mh.dt.cum$Value)
mh.ds.cum$prop<-mh.ds.cum$Value/max(mh.ds.cum$Value)

# combine the four populations
m.ht.four_pop<-rbind(mh.lt.cum[,2:5], mh.dt.cum[,2:5], mh.ls.cum[,2:5], mh.ds.cum[,2:5])

## bring in breaks as a numeric
m.ht.four_pop$breaks.ht<-breaks.ht[-1]



##################

########  ESTIMATED! height
#### 
b.lt.cut = cut(b.lt$errht, breaks.ht, right=FALSE) 
b.lt.cum = as.data.frame(c(0, cumsum(table(b.lt.cut))))
b.lt.cum$rownames<-rownames(b.lt.cum) 
b.lt.cum<-b.lt.cum[-1,]
b.lt.cum$Type<-"Live trees (n=917)"
b.lt.cum$Value<-b.lt.cum$`c(0, cumsum(table(b.lt.cut)))`
b.lt.cum$prop<-b.lt.cum$Value/max(b.lt.cum$Value)
#
b.dt.cut = cut(b.dt$errht, breaks.ht, right=FALSE) 
b.dt.cum = as.data.frame(c(0, cumsum(table(b.dt.cut))))
b.dt.cum$rownames<-rownames(b.dt.cum) 
b.dt.cum<-b.dt.cum[-1,]
b.dt.cum$Type<-"Dead trees (n=511)"
b.dt.cum$Value<-b.dt.cum$`c(0, cumsum(table(b.dt.cut)))`
b.dt.cum$prop<-b.dt.cum$Value/max(b.dt.cum$Value)

#
b.ls.cut = cut(b.ls$errht, breaks.ht, right=FALSE) 
b.ls.cum = as.data.frame(c(0, cumsum(table(b.ls.cut))))
b.ls.cum$rownames<-rownames(b.ls.cum) 
b.ls.cum<-b.ls.cum[-1,]
b.ls.cum$Type<-"Live saplings (n=20)"
b.ls.cum$Value<-b.ls.cum$`c(0, cumsum(table(b.ls.cut)))`
b.ls.cum$prop<-b.ls.cum$Value/max(b.ls.cum$Value)

#
b.ds.cut = cut(b.ds$errht, breaks.ht, right=FALSE) 
b.ds.cum = as.data.frame(c(0, cumsum(table(b.ds.cut))))
b.ds.cum$rownames<-rownames(b.ds.cum) 
b.ds.cum<-b.ds.cum[-1,]
b.ds.cum$Type<-"Dead saplings (n=71)"
b.ds.cum$Value<-b.ds.cum$`c(0, cumsum(table(b.ds.cut)))`
b.ds.cum$prop<-b.ds.cum$Value/max(b.ds.cum$Value)


# calculate the proportional frequency
b.lt.cum$prop<-b.lt.cum$Value/max(b.lt.cum$Value)
b.ls.cum$prop<-b.ls.cum$Value/max(b.ls.cum$Value)
b.dt.cum$prop<-b.dt.cum$Value/max(b.dt.cum$Value)
b.ds.cum$prop<-b.ds.cum$Value/max(b.ds.cum$Value)

# combine the four populations
e.ht.four_pop<-rbind(b.lt.cum[,2:5], b.dt.cum[,2:5], b.ls.cum[,2:5], b.ds.cum[,2:5])

## bring in breaks as a numeric
e.ht.four_pop$breaks.ht<-breaks.ht[-1]

########################################################################


################# Height for decay class
#### 
d1.cut = cut(d1$errht, breaks.ht, right=TRUE) 
d1.cum = as.data.frame(c(0, cumsum(table(d1.cut))))
d1.cum$rownames<-rownames(d1.cum) 
d1.cum<-d1.cum[-1,]
d1.cum$Type<-"Decay class 1"
d1.cum$Value<-d1.cum$`c(0, cumsum(table(d1.cut)))`
d1.cum$prop<-d1.cum$Value/max(d1.cum$Value)
#
d2.cut = cut(d2$errht, breaks.ht, right=TRUE) 
d2.cum = as.data.frame(c(0, cumsum(table(d2.cut))))
d2.cum$rownames<-rownames(d2.cum) 
d2.cum<-d2.cum[-1,]
d2.cum$Type<-"Decay class 2"
d2.cum$Value<-d2.cum$`c(0, cumsum(table(d2.cut)))`
d2.cum$prop<-d2.cum$Value/max(d2.cum$Value)
#
d3.cut = cut(d3$errht, breaks.ht, right=TRUE) 
d3.cum = as.data.frame(c(0, cumsum(table(d3.cut))))
d3.cum$rownames<-rownames(d3.cum) 
d3.cum<-d3.cum[-1,]
d3.cum$Type<-"Decay class 3"
d3.cum$Value<-d3.cum$`c(0, cumsum(table(d3.cut)))`
d3.cum$prop<-d3.cum$Value/max(d3.cum$Value)
#
d4.cut = cut(d4$errht, breaks.ht, right=TRUE) 
d4.cum = as.data.frame(c(0, cumsum(table(d4.cut))))
d4.cum$rownames<-rownames(d4.cum) 
d4.cum<-d4.cum[-1,]
d4.cum$Type<-"Decay class 4"
d4.cum$Value<-d4.cum$`c(0, cumsum(table(d4.cut)))`
d4.cum$prop<-d4.cum$Value/max(d4.cum$Value)
#
d5.cut = cut(d5$errht, breaks.ht, right=TRUE) 
d5.cum = as.data.frame(c(0, cumsum(table(d5.cut))))
d5.cum$rownames<-rownames(d5.cum) 
d5.cum<-d5.cum[-1,]
d5.cum$Type<-"Decay class 5"
d5.cum$Value<-d5.cum$`c(0, cumsum(table(d5.cut)))`
d5.cum$prop<-d5.cum$Value/max(d5.cum$Value)


decay.ht<-rbind(d1.cum[,2:5], d2.cum[,2:5], d3.cum[,2:5], d4.cum[,2:5],d5.cum[,2:5])
## bring in breaks as a numeric
decay.ht$breaks.ht<-breaks.ht[-1]

#######################################################################################



#devtools::install_github("thomasp85/patchwork")
library(patchwork)

table(e.ht.four_pop$Type)


# factor the variables
m.ht.four_pop$Type<-factor(m.ht.four_pop$Type, levels=c("Live trees (n=21,477)","Live saplings (n=1,042)","Dead trees (n=82)","Dead saplings (n=50)"))
e.ht.four_pop$Type<-factor(e.ht.four_pop$Type, levels=c("Live trees (n=917)","Live saplings (n=20)","Dead trees (n=511)","Dead saplings (n=71)"))


#### get the percents
m.ht.four_pop$prop<-m.ht.four_pop$prop*100
e.ht.four_pop$prop<-e.ht.four_pop$prop*100
decay.ht$prop<-decay.ht$prop*100



g.ht<-ggplot(m.ht.four_pop, aes(x=breaks.ht, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("")+ylab("")+theme_bw()+theme(text=element_text(size=18))+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_linetype_manual(values=c("solid","dotdash","longdash", "dotted"))+
  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))+ggtitle("A. Unbroken trees")+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+ theme(plot.title = element_text(hjus=.02,vjus=-8))+
  theme(text=element_text(size=24), legend.key.width = unit(4,"cm"))
g.ht

e.ht<-ggplot(e.ht.four_pop, aes(x=breaks.ht, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("")+ylab("Cumulative frequency (%)")+theme_bw()+theme(text=element_text(size=18))+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_linetype_manual(values=c("solid","dotdash","longdash", "dotted"))+
  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))+ggtitle("B. Broken trees")+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+ theme(plot.title = element_text(hjus=.02,vjus=-8))+
  theme(text=element_text(size=24), legend.key.width = unit(4,"cm"))+
  scale_x_continuous(breaks=seq(-5,5,1), limits=c(-5,5))
  
e.ht

d.ht<-ggplot(decay.ht, aes(x=breaks.ht, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("Height error (FC-QA) (m)")+ylab("")+theme_bw()+ theme(text=element_text(size=18))+ylab("")+theme_bw()+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_linetype_manual(values=c("solid","longdash","twodash","dotdash","dotted"))+
  scale_color_manual(values=c("brown","grey","orange","blue","red"))+
  scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))+ggtitle("C. Decay class")+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+ theme(plot.title = element_text(hjus=.02,vjus=-8))+
  theme(text=element_text(size=24), legend.key.width = unit(4,"cm"))+
  scale_x_continuous(breaks=seq(-4.815,4.945,2))+  xlim(-4.815,4.945)
d.ht

table(trees$Q_STATUSCD)


g.ht + e.ht + d.ht +plot_layout(ncol = 1)

dpi=300    #pixels per square inch
tiff("cumulative freq height.tif", width=14*dpi, height=14*dpi, res=dpi)
g.ht + e.ht + d.ht +plot_layout(ncol = 1)
dev.off()

#######################################################


mt + facet_grid(vars(cyl), scales = "free")












###########################################################################################################


seeds   <-read.csv("data_folder/SEEDLING_REV_FIA_NRS.csv", header=T)
seeds$APLOT<-paste(seeds$STATECD,seeds$INVYR,seeds$COUNTYCD,seeds$PLOT)
seeds$F_BPLOT<-paste(seeds$APLOT, seeds$F_SUBP)
seeds$Q_BPLOT<-paste(seeds$APLOT, seeds$Q_SUBP)


#### seedling count error by species
seeds$errspco<-as.numeric((seeds$F_TREECOUNT - seeds$Q_TREECOUNT)) # sp Seedcount
seeds$errabsspco<-as.numeric(abs(seeds$F_TREECOUNT - seeds$Q_TREECOUNT)) # sp Seedcount
seeds$errpercspco<-as.numeric((seeds$F_TREECOUNT - seeds$Q_TREECOUNT)/seeds$Q_TREECOUNT) # sp Seedcount
# aggregate to plot sum for seedco
seed.qna<-seeds[!is.na(seeds$Q_SUBP),]
seed.fna<-seeds[!is.na(seeds$F_SUBP),]
# aggregate to get FC and QA counts
qseed <-aggregate(list(Q_seed= seed.qna[ ,c("Q_TREECOUNT")]), by=list(seed.qna$Q_BPLOT ),FUN=sum, na.rm=TRUE)
fc.co<-aggregate(list(F_treeco=seeds[ ,c("F_TREECOUNT")]), by=list(seeds$F_BPLOT ),FUN=sum, na.rm=TRUE)
# match 
qseed$F_seed<-fc.co$F_treeco[match(qseed$Group.1, fc.co$Group.1)]
# turn FC NA into 0
qseed$F_seed[is.na(qseed$F_seed)] <- 0
### seed count error calc
qseed$errco<-as.numeric((qseed$F_seed - qseed$Q_seed))
qseed$errabsco<-as.numeric(abs(qseed$F_seed - qseed$Q_seed))
qseed$errpercco<-as.numeric((qseed$F_seed - qseed$Q_seed)/qseed$Q_seed)
#####    seedling species number error
# seed.qna,  seed.fna  
# tapply to get species occurences. Thank you tardigrades.
qacom<-as.data.frame(tapply( seed.qna$Q_SPECIES , list(seed.qna$Q_BPLOT, seed.qna$Q_SPECIES),length)) 
fccom<-as.data.frame(tapply( seed.fna$F_SPECIES , list(seed.fna$F_BPLOT, seed.fna$F_SPECIES),length))  
qacom$Q_spco<-rowSums(qacom[ ,c(1:dim(qacom)[2])], na.rm=TRUE) # 119 QA species
fccom$F_spco<-rowSums(fccom[ ,c(1:dim(fccom)[2])], na.rm=TRUE) # 130 FC species
qacom$Q_SUBP<-rownames(qacom)
fccom$F_SUBP<-rownames(fccom)
# now match 
qacom$F_spco<-fccom$F_spco[match(qacom$Q_SUBP, fccom$F_SUBP)]
qacom$F_spco[is.na(qacom$F_spco)] <- 0   # turn FC NA into 0.
### seed sp error calc
qacom$errspco<-((qacom$F_spco - qacom$Q_spco))
qacom$errabsspco<-(abs(qacom$F_spco - qacom$Q_spco))
qacom$errpercspco<-((qacom$F_spco - qacom$Q_spco)/qacom$Q_spco)

###################################################################################
## set breaks
summary(seeds$errspco)
breaks.seed = seq(-20, 20, by=1) 


#######
spco.cut <- cut(seeds$errspco , breaks.seed, right=FALSE) 
f.spco = as.data.frame(c(0, cumsum(table(spco.cut))))
f.spco$rownames<-rownames(f.spco) 
f.spco<-f.spco[-1,]
table(is.na(seeds$errspco))
f.spco$Type<-"Number of seedlings by species (n=8,015)"
f.spco$Value<-f.spco$`c(0, cumsum(table(spco.cut)))`
f.spco$prop<-(f.spco$Value/max(f.spco$Value))*100
f.spco$breaks.seed<-breaks.seed[-1]
#
head(qacom, 30)
qacom.cut<- cut(qacom$errspco, breaks.seed, right=FALSE)
qacom.cut
f.sp = as.data.frame(c(0, cumsum(table(qacom.cut))))
f.sp$rownames<-rownames(f.sp) 
f.sp<-f.sp[-1,]
f.sp$Type<-"Number of species (n=3,862)"

f.sp$Value<-f.sp$`c(0, cumsum(table(qacom.cut)))`
f.sp$prop<-(f.sp$Value/max(f.sp$Value))*100
f.sp$breaks.seed<-breaks.seed[-1]
#
qseed.cut<- cut(qseed$errco, breaks.seed, right=FALSE)
f.co = as.data.frame(c(0, cumsum(table(qseed.cut))))
f.co$rownames<-rownames(f.co) 
f.co<-f.co[-1,]
table(is.na(qseed$errco))
f.co$Type<-"Number of seedlings (n=3,862)"
f.co$Value<-f.co$`c(0, cumsum(table(qseed.cut)))`
f.co$prop<-(f.co$Value/max(f.co$Value))*100
f.co$breaks.seed<-breaks.seed[-1]

head(f.sp)
head(f.spco)
head(f.co)

se<-rbind(f.spco[,-1], f.sp[,-1], f.co[,-1])
head(se,50)
table(se$Type)

f.sed<-ggplot(se, aes(x=breaks.seed, y=prop, col=Type))+geom_line(lwd=2, aes(linetype=Type))+
  xlab("Seedling error (FC-QA)")+ylab("Cumulative frequency (%)")+theme_bw()+
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))+
  theme(legend.position = c(0.8, 0.5))+theme(legend.title = element_blank())+theme(plot.title = element_text(hjust=0.05, vjust=-8))+
  theme(text=element_text(size=22), legend.key.width = unit(3,"cm"))+
 scale_x_continuous(breaks=seq(-8,8,2), limits=c(-8,8))

f.sed
dev.off()


