



############### Packages ####################################################
library(neonUtilities)
library(lidR)
library(gstat)
library(rgdal)
library(rgeos)
library(data.table)
library(ggplot2)
library(tidyr)


########## Shapefile data
# load shapefile of Bartlett plot polygons
stands<-readOGR("R_Output","Bartlett_intensive_sites_30x30")

stands<-spTransform(stands,CRS("+proj=utm +zone=19 +datum=WGS84 +units=m +no_defs+ellps=WGS84 +towgs84=0,0,0")) # To convert it to WGS8
stands@data
# centroids are the 'plot centers'. This script works with point data.
centroids <- as.data.frame(getSpPPolygonsLabptSlots(stands))
rownames(centroids)<-stands$unique_plo
centroids$Stand<-as.factor(stands$stand)
centroids$Plot<-as.factor(stands$plot)

# this line downloads the Aop data
northing.C7<-c(4880257 )
easting.C7<-c(315553.4)

easting.C1<-c( 313970.5  )
northing.C1<-c(4879223)


#byTileAOP("DP1.30003.001", site="BART", year="2019", check.size = F,buffer = 200, easting=easting, northing=northing, savepath="neon_data")


# read in LAz files

# 2017
f19<-list.files(path="neon_data\\DP1.30003.001\\2019\\FullSite\\D01\\2019_BART_5\\L1\\DiscreteLidar\\ClassifiedPointCloud", recursive = T, full.names = T)
f19

################################################################################################################################################################

# slot 2 is C1.   slot 5 is C7
use.laz<-readLAS(f19[2])
extent(use.laz)

plot.area<-25

# You shouldn't have to change anything below.
# select the xy location of the plot we are calculating canopy metrics for
y<-northing.C1
x<-easting.C1

#Cut out a 200 x 200 m buffer by adding 100 m to easting and northing coordinates (x,y).
data.cut <- lasclipRectangle( use.laz , xleft = (as.numeric(x - 100)), ybottom = (as.numeric(y - 100)),xright = (as.numeric(x + 100)), ytop = (as.numeric(y + 100)))
#Correct for ground height using a kriging function to interpolate elevation from ground points in the .laz file.
#If the function will not run, then you may need to checkfor outliers by adjusting the 'drop_z_' arguments when reading in the .laz files.
dtm <- grid_terrain(data.cut, 1, kriging(k = 10L))
data.200m<- lasnormalize(data.cut, dtm)
#plot(data.200m)

data.30m <- lasclipRectangle(data.200m, xleft = (x - plot.area), ybottom = (y - plot.area), xright = (x + plot.area), ytop = (y + plot.area))
data.30m@data$Z[data.30m@data$Z <= 1] <- NA  
data.30m@data$Z[data.30m@data$Z >= 35] <- NA  
laz_data<-data.30m
plot(laz_data)


##################################################################################################################
# slot 2 is C1.   slot 5 is C7
use.laz<-readLAS(f19[5])
extent(use.laz)

plot.area<-25

# You shouldn't have to change anything below.
# select the xy location of the plot we are calculating canopy metrics for
y<-northing.C7
x<-easting.C7

#Cut out a 200 x 200 m buffer by adding 100 m to easting and northing coordinates (x,y).
data.cut <- lasclipRectangle( use.laz , xleft = (as.numeric(x - 100)), ybottom = (as.numeric(y - 100)),xright = (as.numeric(x + 100)), ytop = (as.numeric(y + 100)))
#Correct for ground height using a kriging function to interpolate elevation from ground points in the .laz file.
#If the function will not run, then you may need to checkfor outliers by adjusting the 'drop_z_' arguments when reading in the .laz files.
dtm <- grid_terrain(data.cut, 1, kriging(k = 10L))
data.200m<- lasnormalize(data.cut, dtm)
#plot(data.200m)

data.30m <- lasclipRectangle(data.200m, xleft = (x - plot.area), ybottom = (y - plot.area), xright = (x + plot.area), ytop = (y + plot.area))
data.30m@data$Z[data.30m@data$Z <= 1] <- NA  
data.30m@data$Z[data.30m@data$Z >= 35] <- NA  
laz_data<-data.30m
plot(laz_data)

  
####################################################  
  
chm <- grid_canopy(laz_data, res = 1, dsmtin()) 

mean.max.canopy.ht <- mean(chm@data@values, na.rm = TRUE) 

max.canopy.ht <- max(chm@data@values, na.rm=TRUE) 
rumple <- rumple_index(chm) 
rumple
sd(chm@data@values, na.rm = TRUE)
chm@data@values


mean(chm@data@values, na.rm=T)/var(chm@data@values, na.rm=T)
  

################################################################################################################################################################




  
#########################################################  
# analysis for LiDAR
  
  library(ggplot2)
  library(lme4)
  library(lmerTest)
  
  
  lid<-read.csv("data/all_years_30x30_lidar.csv")
  lid
  lid$Ntrmt<-factor(lid$Ntrmt,levels=c("NoN","N"))
  lid$Pgroup<-paste(lid$Ptrmt, lid$Stand, lid$Year)
  lid$Ngroup<-paste(lid$Ntrmt, lid$Stand)

  table(lid$year)  



  
  
  tree<-read.csv("data/10+cm.csv")
  tree<-tree[tree$Plot!="5",] # no calcium
  library(tidyr)
  bap<-aggregate(tree$BA.m2, list(Stand=tree$Stand, Plot=tree$Plot, Age=tree$Age), FUN="sum", simplify=T)
  bap$staplo<-paste(bap$Stand, bap$Plot)
  bap$Treatment<-sapply(bap$staplo,switch,
                        "C1 1"="P",   "C1 2"="N",   "C1 3"="Control", "C1 4"="NP",
                        "C2 1"="NP",  "C2 2"="Control","C2 3"="P",    "C2 4"="N",
                        "C3 1"="NP",  "C3 2"="P",   "C3 3"="N",    "C3 4"="Control",
                        "C4 1"="NP",  "C4 2"="N",   "C4 3"="Control", "C4 4"="P",
                        "C5 1"="Control","C5 2"="NP",  "C5 3"="N",    "C5 4"="P",
                        "C6 1"="NP",  "C6 2"="Control","C6 3"="N",    "C6 4"="P","C6 5"="Ca",
                        "C7 1"="N",   "C7 2"="NP",  "C7 3"="P",    "C7 4"="Control",
                        "C8 1"="P",   "C8 2"="Control","C8 3"="N",    "C8 4"="NP","C8 5"="Ca",
                        "C9 1"="Control","C9 2"="P",   "C9 3"="NP",   "C9 4"="N")
  bap
  bap$staplo<-paste(bap$Stand, bap$Plot)
  lid$BA<-bap$x[match(lid$staplo, bap$staplo)]

  
  
  ##########################################
  
  anova(lmer(entropy.aop ~ Ntrmt*Ptrmt+Age+(1|Stand)+(1|Year), data=lid))
  
  aov<- function(y, Stand, Ntrmt, Ptrmt, Age,Year,staplo){
    slope1<-anova(lmer(y ~ Ntrmt*Ptrmt+Age+(1|Stand)+(1|Year)))
    return(slope1)}
  
  
  pm<-lid
  names(pm)
  metric<-list()
  names(lid)
  for(i in c(4:16)){ 
    y = pm[,i]
    Stand= pm$Stand
    staplo=pm$staplo
    Ntrmt=pm$Ntrmt
    Ptrmt=pm$Ptrmt
    Year=pm$Year
    Age=pm$Age
    metric[[i-3]] <- aov(y, Stand, Ntrmt, Ptrmt, Age, Year, staplo)}
  
  
  library(data.table)
  met<- as.data.frame(rbindlist(metric))
  met
  met$Source<-rep(c("N","P","Age","N*P"))
  met$resp.var<-rep(names(pm)[c(4:16)], each=4)
  
  #met$Source<-rep(c("N","P","Age","N*P","N*Age","P*Age","N*P*Age"))
  #met$resp.var<-rep(names(pm)[c(4:16)], each=7)
  
  dim(met)
  
  met<-met[ ,c(8,7,3:6)]
  met<-na.omit(met)
  met
  
  met[met$`Pr(>F)`<0.05,]

  met$adj.p<-p.adjust(met$`Pr(>F)`, method="hochberg", n=length(met$`Pr(>F)`))  
  
  met[met$adj.p<0.05,]
  ##################################
  

  lid$Age<-factor(lid$Age, levels=c("~30 years old","~60 years old","~100 years old"))

    ggplot(lid, aes(x=year, y=mean.max.canopy.ht.aop,col=Treatment,  group=staplo))+geom_line()+
    facet_wrap(~Age)+scale_color_manual(values=c("black","blue","red","purple"))+
    ylab("mean max tree height (m)")+theme_classic()+geom_point()+
    geom_text(aes(label=staplo),hjust=0, vjust=0)
  
    
##########################
  
li<-  aggregate(list( BA=lid$BA, mean.max=lid$mean.max.canopy.ht.aop,entropy=lid$entropy.aop, rumple=lid$rumple.aop, rugosity=lid$top.rugosity.aop,
                 vert.sd.aop=lid$vert.sd.aop, VCI=lid$VCI.AOP.aop), by=list(Stand=lid$Stand, Treatment=lid$Treatment, Age=lid$Age), FUN="mean", na.rm=T)
  

lid$Treatment<-factor(lid$Treatment, levels=c("Control","N","P","NP"))  
li$Treatment<-factor(li$Treatment, levels=c("Control","N","P","NP"))  
  
   g1<- ggplot(li, aes(x=Stand, y=rumple,group=Treatment,fill=Treatment))+geom_bar(stat="identity",position="dodge")+
    scale_fill_manual(values=c("black","blue","red","purple"))+
    ylab("Canopy rumple")+theme_classic()+geom_point()
  
    g2<-ggplot(li, aes(x=Stand, y=rugosity,group=Treatment,fill=Treatment))+geom_bar(stat="identity",position="dodge")+
      scale_fill_manual(values=c("black","blue","red","purple"))+
      ylab("Canopy rugosity")+theme_classic()+geom_point()
    
    g3<-ggplot(li, aes(x=Stand, y=vert.sd.aop,group=Treatment,fill=Treatment))+geom_bar(stat="identity",position="dodge")+
      scale_fill_manual(values=c("black","blue","red","purple"))+
      ylab("Canopy vertical sd")+theme_classic()+geom_point()
    
    
    g4<-ggplot(li, aes(x=Stand, y=VCI,group=Treatment,fill=Treatment))+geom_bar(stat="identity",position="dodge")+
      scale_fill_manual(values=c("black","blue","red","purple"))+
      ylab("Veg complexity index")+theme_classic()+geom_point()
    
    ggplot(li, aes(x=Stand, y=entropy,group=Treatment,fill=Treatment))+geom_bar(stat="identity",position="dodge")+
      scale_fill_manual(values=c("black","blue","red","purple"))+
      ylab("Veg complexity index")+theme_classic()+geom_point()
    
    
    library(ggpubr)
    ggarrange(g1, g2, g3, g4, common.legend=T, legend="bottom", nrow=2, ncol=2)
    
    
ggplot(li, aes(x=Stand, y=rumple.aop,group=Treatment,fill=Treatment))+geom_bar(stat="identity",position="dodge")+
      scale_fill_manual(values=c("black","blue","red","purple"))+
      ylab("Canopy rumple")+theme_classic()+geom_point()
    
    
    
#########################################################################################

library(tidyverse)
library(broom)

t = 1:100
y1 = 22 + (53 - 22) * exp(-0.02 * t) %>% jitter(10)
y2 = 24 + (60 - 24) * exp(-0.01 * t) %>% jitter(10)


df <- tibble(t = t, y = y1, sensor = 'sensor1') %>% 
  rbind(. , data.frame(t = t, y = y2, sensor = 'sensor2'))


df
  
qplot(t, y, data = df, colour = sensor)  

 sensor1 <- df %>% filter(sensor == 'sensor1')
 sensor2 <- df %>% filter(sensor == 'sensor2')
 
 fit1 <- nls(y ~ SSasymp(t, yf, y0, log_alpha), data = sensor1)
 fit2 <- nls(y ~ SSasymp(t, yf, y0, log_alpha), data = sensor2)
  fit1

  fit2 
  